buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// apply plugin: 'eclipse'
// apply plugin: 'maven-publish'

version = '1.0'
group = 'com.mrbysco.foodtweaker' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'FoodTweaker'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                foodtweaker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                foodtweaker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                foodtweaker {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.k-4u.nl"
	}
	maven {
        url "http://maven.blamejared.com"
	}
	maven { 
		url "http://tehnut.info/maven" 
	}
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.14.4-28.1.44'

	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("mezz.jei:jei-1.14.4:6.0.0.18:api")
	// at runtime, use the full JEI jar
	runtimeOnly fg.deobf("mezz.jei:jei-1.14.4:6.0.0.18")
	
	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker:1.14.4-5.0.0.86")
	// at runtime, use the full JEI jar
	runtimeOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker:1.14.4-5.0.0.86")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "foodtweaker",
            "Specification-Vendor": "Mrbysco",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Mrbysco",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}